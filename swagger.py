# -*- coding:utf-8 -*-
# this is auto-generated by swagger-marshmallow-codegen
from marshmallow import (
    Schema,
    fields
)
from marshmallow.validate import (
    Length,
    OneOf,
    Regexp
)
from swagger_marshmallow_codegen.validate import (
    Range
)
import re


class ODataQueryOptionsAccountBalanceAPI(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class ODataQueryContext(Schema):
    default_query_settings = fields.Nested('DefaultQuerySettings', data_key='DefaultQuerySettings')
    model = fields.Nested('IEdmModel', data_key='Model')
    element_type = fields.Nested('IEdmType', data_key='ElementType')
    navigation_source = fields.Nested('IEdmNavigationSource', data_key='NavigationSource')
    element_clr_type = fields.String(dump_only=True, data_key='ElementClrType')
    path = fields.Nested('ODataPath', data_key='Path')
    request_container = fields.Nested('IServiceProvider', data_key='RequestContainer')


class ODataRawQueryOptions(Schema):
    filter = fields.String(dump_only=True, data_key='Filter')
    apply = fields.String(dump_only=True, data_key='Apply')
    order_by = fields.String(dump_only=True, data_key='OrderBy')
    top = fields.String(dump_only=True, data_key='Top')
    skip = fields.String(dump_only=True, data_key='Skip')
    select = fields.String(dump_only=True, data_key='Select')
    expand = fields.String(dump_only=True, data_key='Expand')
    count = fields.String(dump_only=True, data_key='Count')
    format = fields.String(dump_only=True, data_key='Format')
    skip_token = fields.String(dump_only=True, data_key='SkipToken')
    delta_token = fields.String(dump_only=True, data_key='DeltaToken')


class SelectExpandQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    raw_select = fields.String(dump_only=True, data_key='RawSelect')
    raw_expand = fields.String(dump_only=True, data_key='RawExpand')
    validator = fields.Nested('SelectExpandQueryValidator', data_key='Validator')
    select_expand_clause = fields.Nested('SelectExpandClause', data_key='SelectExpandClause')
    levels_max_literal_expansion_depth = fields.Integer(data_key='LevelsMaxLiteralExpansionDepth')


class ApplyQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    result_clr_type = fields.String(dump_only=True, data_key='ResultClrType')
    apply_clause = fields.Nested('ApplyClause', data_key='ApplyClause')
    raw_value = fields.String(dump_only=True, data_key='RawValue')


class FilterQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    validator = fields.Nested('FilterQueryValidator', data_key='Validator')
    filter_clause = fields.Nested('FilterClause', data_key='FilterClause')
    raw_value = fields.String(dump_only=True, data_key='RawValue')


class OrderByQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    order_by_nodes = fields.List(fields.Nested('OrderByNode'), dump_only=True, data_key='OrderByNodes')
    raw_value = fields.String(dump_only=True, data_key='RawValue')
    validator = fields.Nested('OrderByQueryValidator', data_key='Validator')
    order_by_clause = fields.Nested('OrderByClause', data_key='OrderByClause')


class SkipQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    raw_value = fields.String(dump_only=True, data_key='RawValue')
    value = fields.Integer(dump_only=True, data_key='Value')
    validator = fields.Nested('SkipQueryValidator', data_key='Validator')


class TopQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    raw_value = fields.String(dump_only=True, data_key='RawValue')
    value = fields.Integer(dump_only=True, data_key='Value')
    validator = fields.Nested('TopQueryValidator', data_key='Validator')


class CountQueryOption(Schema):
    context = fields.Nested('ODataQueryContext', data_key='Context')
    raw_value = fields.String(dump_only=True, data_key='RawValue')
    value = fields.Boolean(dump_only=True, data_key='Value')
    validator = fields.Nested('CountQueryValidator', data_key='Validator')


class ODataQueryValidator(Schema):
    pass


class DefaultQuerySettings(Schema):
    enable_expand = fields.Boolean(data_key='EnableExpand')
    enable_select = fields.Boolean(data_key='EnableSelect')
    enable_count = fields.Boolean(data_key='EnableCount')
    enable_order_by = fields.Boolean(data_key='EnableOrderBy')
    enable_filter = fields.Boolean(data_key='EnableFilter')
    max_top = fields.Integer(data_key='MaxTop')


class IEdmModel(Schema):
    schema_elements = fields.List(fields.Nested('IEdmSchemaElement'), dump_only=True, data_key='SchemaElements')
    vocabulary_annotations = fields.List(fields.Nested('IEdmVocabularyAnnotation'), dump_only=True, data_key='VocabularyAnnotations')
    referenced_models = fields.List(fields.Nested('self'), dump_only=True, data_key='ReferencedModels')
    declared_namespaces = fields.List(fields.String(), dump_only=True, data_key='DeclaredNamespaces')
    direct_value_annotations_manager = fields.Nested('IEdmDirectValueAnnotationsManager', data_key='DirectValueAnnotationsManager')
    entity_container = fields.Nested('IEdmEntityContainer', data_key='EntityContainer')


class IEdmType(Schema):
    type_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8], labels=[])], data_key='TypeKind')


class IEdmNavigationSource(Schema):
    navigation_property_bindings = fields.List(fields.Nested('IEdmNavigationPropertyBinding'), dump_only=True, data_key='NavigationPropertyBindings')
    path = fields.Nested('IEdmPathExpression', data_key='Path')
    type = fields.Nested('IEdmType', data_key='Type')
    name = fields.String(dump_only=True, data_key='Name')


class ODataPath(Schema):
    edm_type = fields.Nested('IEdmType', data_key='EdmType')
    navigation_source = fields.Nested('IEdmNavigationSource', data_key='NavigationSource')
    segments = fields.List(fields.Nested('ODataPathSegment'), dump_only=True, data_key='Segments')
    path_template = fields.String(dump_only=True, data_key='PathTemplate')


class IServiceProvider(Schema):
    pass


class SelectExpandQueryValidator(Schema):
    pass


class SelectExpandClause(Schema):
    selected_items = fields.List(fields.Nested('SelectItem'), dump_only=True, data_key='SelectedItems')
    all_selected = fields.Boolean(dump_only=True, data_key='AllSelected')


class ApplyClause(Schema):
    transformations = fields.List(fields.Nested('TransformationNode'), dump_only=True, data_key='Transformations')


class FilterQueryValidator(Schema):
    pass


class FilterClause(Schema):
    expression = fields.Nested('SingleValueNode', data_key='Expression')
    range_variable = fields.Nested('RangeVariable', data_key='RangeVariable')
    item_type = fields.Nested('IEdmTypeReference', data_key='ItemType')


class OrderByNode(Schema):
    direction = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1], labels=[])], data_key='Direction')


class OrderByQueryValidator(Schema):
    pass


class OrderByClause(Schema):
    then_by = fields.Nested('self', data_key='ThenBy')
    expression = fields.Nested('SingleValueNode', data_key='Expression')
    direction = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1], labels=[])], data_key='Direction')
    range_variable = fields.Nested('RangeVariable', data_key='RangeVariable')
    item_type = fields.Nested('IEdmTypeReference', data_key='ItemType')


class SkipQueryValidator(Schema):
    pass


class TopQueryValidator(Schema):
    pass


class CountQueryValidator(Schema):
    pass


class IEdmSchemaElement(Schema):
    schema_element_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5], labels=[])], data_key='SchemaElementKind')
    namespace = fields.String(dump_only=True, data_key='Namespace')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmVocabularyAnnotation(Schema):
    qualifier = fields.String(dump_only=True, data_key='Qualifier')
    term = fields.Nested('IEdmTerm', data_key='Term')
    target = fields.Nested('IEdmVocabularyAnnotatable', data_key='Target')
    value = fields.Nested('IEdmExpression', data_key='Value')


class IEdmDirectValueAnnotationsManager(Schema):
    pass


class IEdmEntityContainer(Schema):
    elements = fields.List(fields.Nested('IEdmEntityContainerElement'), dump_only=True, data_key='Elements')
    schema_element_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5], labels=[])], data_key='SchemaElementKind')
    namespace = fields.String(dump_only=True, data_key='Namespace')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmNavigationPropertyBinding(Schema):
    navigation_property = fields.Nested('IEdmNavigationProperty', data_key='NavigationProperty')
    target = fields.Nested('IEdmNavigationSource', data_key='Target')
    path = fields.Nested('IEdmPathExpression', data_key='Path')


class IEdmPathExpression(Schema):
    path_segments = fields.List(fields.String(), dump_only=True, data_key='PathSegments')
    path = fields.String(dump_only=True, data_key='Path')
    expression_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], labels=[])], data_key='ExpressionKind')


class ODataPathSegment(Schema):
    edm_type = fields.Nested('IEdmType', data_key='EdmType')
    identifier = fields.String(data_key='Identifier')


class SelectItem(Schema):
    pass


class TransformationNode(Schema):
    kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='Kind')


class SingleValueNode(Schema):
    type_reference = fields.Nested('IEdmTypeReference', data_key='TypeReference')
    kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], labels=[])], data_key='Kind')


class RangeVariable(Schema):
    name = fields.String(dump_only=True, data_key='Name')
    type_reference = fields.Nested('IEdmTypeReference', data_key='TypeReference')
    kind = fields.Integer(dump_only=True, data_key='Kind')


class IEdmTypeReference(Schema):
    is_nullable = fields.Boolean(dump_only=True, data_key='IsNullable')
    definition = fields.Nested('IEdmType', data_key='Definition')


class IEdmTerm(Schema):
    type = fields.Nested('IEdmTypeReference', data_key='Type')
    applies_to = fields.String(dump_only=True, data_key='AppliesTo')
    default_value = fields.String(dump_only=True, data_key='DefaultValue')
    schema_element_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5], labels=[])], data_key='SchemaElementKind')
    namespace = fields.String(dump_only=True, data_key='Namespace')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmVocabularyAnnotatable(Schema):
    pass


class IEdmExpression(Schema):
    expression_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], labels=[])], data_key='ExpressionKind')


class IEdmEntityContainerElement(Schema):
    container_element_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4], labels=[])], data_key='ContainerElementKind')
    container = fields.Nested('IEdmEntityContainer', data_key='Container')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmNavigationProperty(Schema):
    partner = fields.Nested('self', data_key='Partner')
    on_delete = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1], labels=[])], data_key='OnDelete')
    contains_target = fields.Boolean(dump_only=True, data_key='ContainsTarget')
    referential_constraint = fields.Nested('IEdmReferentialConstraint', data_key='ReferentialConstraint')
    property_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='PropertyKind')
    type = fields.Nested('IEdmTypeReference', data_key='Type')
    declaring_type = fields.Nested('IEdmStructuredType', data_key='DeclaringType')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmReferentialConstraint(Schema):
    property_pairs = fields.List(fields.Nested('EdmReferentialConstraintPropertyPair'), dump_only=True, data_key='PropertyPairs')


class IEdmStructuredType(Schema):
    is_abstract = fields.Boolean(dump_only=True, data_key='IsAbstract')
    is_open = fields.Boolean(dump_only=True, data_key='IsOpen')
    base_type = fields.Nested('self', data_key='BaseType')
    declared_properties = fields.List(fields.Nested('IEdmProperty'), dump_only=True, data_key='DeclaredProperties')
    type_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8], labels=[])], data_key='TypeKind')


class EdmReferentialConstraintPropertyPair(Schema):
    dependent_property = fields.Nested('IEdmStructuralProperty', data_key='DependentProperty')
    principal_property = fields.Nested('IEdmStructuralProperty', data_key='PrincipalProperty')


class IEdmProperty(Schema):
    property_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='PropertyKind')
    type = fields.Nested('IEdmTypeReference', data_key='Type')
    declaring_type = fields.Nested('IEdmStructuredType', data_key='DeclaringType')
    name = fields.String(dump_only=True, data_key='Name')


class IEdmStructuralProperty(Schema):
    default_value_string = fields.String(dump_only=True, data_key='DefaultValueString')
    property_kind = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='PropertyKind')
    type = fields.Nested('IEdmTypeReference', data_key='Type')
    declaring_type = fields.Nested('IEdmStructuredType', data_key='DeclaringType')
    name = fields.String(dump_only=True, data_key='Name')


class PaginatedResponseAccountBalanceAPI(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('AccountBalanceAPI'), data_key='Data')


class PaginationMetadata(Schema):
    current_page = fields.Integer(data_key='CurrentPage')
    page_size = fields.Integer(data_key='PageSize')
    total_number_of_pages = fields.Integer(data_key='TotalNumberOfPages')
    total_number_of_results = fields.Integer(data_key='TotalNumberOfResults')
    server_time_utc = fields.DateTime(data_key='ServerTimeUtc')


class AccountBalanceAPI(Schema):
    account_number = fields.Integer(description='Read-only. The account number', data_key='AccountNumber')
    account_name = fields.String(description='Read-only. The name of the account', data_key='AccountName')
    balance = fields.Number(description='Read-only. The account balance', data_key='Balance')


class ODataQueryOptionsAccountApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseAccountApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('AccountApi'), data_key='Data')


class AccountApi(Schema):
    name = fields.String(required=True, description='Max length: 100 characters. The name of the account', validate=[Length(min=0, max=100, equal=None)], data_key='Name')
    number = fields.String(required=True, description='The account number', data_key='Number')
    vat_code_id = fields.UUID(description='The Id of the VAT code that is associated with the account', data_key='VatCodeId')
    vat_code_description = fields.String(description='Read-only. Describes what kind of VAT that is associated with the account', data_key='VatCodeDescription')
    fiscal_year_id = fields.UUID(required=True, description='The Id of the Fiscal year that the account belongs to', data_key='FiscalYearId')
    reference_code = fields.String(description='Read-only. Returns the reference code on the account. This feature is for dutch companies only', data_key='ReferenceCode')
    type = fields.Integer(description='Read-only. Returns account type number. Netherlands only', data_key='Type')
    type_description = fields.String(description='Read-only. Returns account type descripion', data_key='TypeDescription')
    modified_utc = fields.DateTime(description='Read-only.', data_key='ModifiedUtc')
    is_active = fields.Boolean(required=True, data_key='IsActive')
    is_project_allowed = fields.Boolean(data_key='IsProjectAllowed')
    is_cost_center_allowed = fields.Boolean(data_key='IsCostCenterAllowed')
    is_blocked_for_manual_booking = fields.Boolean(data_key='IsBlockedForManualBooking')


class ODataQueryOptionsStandardAccountApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseStandardAccountApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('StandardAccountApi'), data_key='Data')


class StandardAccountApi(Schema):
    account_type = fields.String(data_key='AccountType')
    account_number = fields.Integer(data_key='AccountNumber')


class ODataQueryOptionsAccountTypesAPI(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseAccountTypesAPI(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('AccountTypesAPI'), data_key='Data')


class AccountTypesAPI(Schema):
    type = fields.Integer(data_key='Type')
    type_description = fields.String(data_key='TypeDescription')


class ODataQueryOptionsAllocationPeriodApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseAllocationPeriodApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('AllocationPeriodApi'), data_key='Data')


class AllocationPeriodApi(Schema):
    id = fields.UUID(data_key='Id')
    supplier_invoice_id = fields.UUID(data_key='SupplierInvoiceId')
    supplier_invoice_row = fields.Integer(data_key='SupplierInvoiceRow')
    manual_voucher_id = fields.UUID(data_key='ManualVoucherId')
    manual_voucher_row = fields.Integer(data_key='ManualVoucherRow')
    allocation_period_source_type = fields.Integer(description='0 = SupplierInvoice, 1 = ManualVoucher', validate=[OneOf(choices=[0, 1], labels=[])], data_key='AllocationPeriodSourceType')
    status = fields.Integer(description='0 = Pending, 1 = Revoked, 2 = Booked', validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='Status')
    cost_center_item_id1 = fields.UUID(data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(data_key='CostCenterItemId3')
    project_id = fields.UUID(data_key='ProjectId')
    bookkeeping_date = fields.DateTime(data_key='BookkeepingDate')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    rows = fields.List(fields.Nested('AllocationPeriodRowApi'), required=True, data_key='Rows')
    debit_account_number = fields.Integer(dump_only=True, data_key='DebitAccountNumber')
    credit_account_number = fields.Integer(dump_only=True, data_key='CreditAccountNumber')
    amount = fields.Number(dump_only=True, data_key='Amount')


class AllocationPeriodRowApi(Schema):
    id = fields.UUID(data_key='Id')
    allocation_period_id = fields.UUID(data_key='AllocationPeriodId')
    account_number = fields.Integer(required=True, data_key='AccountNumber')
    amount = fields.Number(required=True, data_key='Amount')
    quantity = fields.Number(data_key='Quantity')
    weight = fields.Number(data_key='Weight')
    debit_credit = fields.Integer(required=True, description='1 = Debit, 2 = Credit', validate=[OneOf(choices=[1, 2], labels=[])], data_key='DebitCredit')


class AllocationPlan(Schema):
    supplier_invoice_id = fields.UUID(data_key='SupplierInvoiceId')
    supplier_invoice_row = fields.Integer(data_key='SupplierInvoiceRow')
    voucher_id = fields.UUID(data_key='VoucherId')
    voucher_row = fields.Integer(data_key='VoucherRow')
    bookkeeping_start_date = fields.DateTime(required=True, data_key='BookkeepingStartDate')
    amount_to_allocate = fields.Number(required=True, validate=[Range(min=0, max=1000000000, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='AmountToAllocate')
    quantity_to_allocate = fields.Number(validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='QuantityToAllocate')
    weight_to_allocate = fields.Number(validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='WeightToAllocate')
    allocation_account_number = fields.Integer(required=True, validate=[Range(min=0, max=9999, exclusive_min=False, exclusive_max=False)], data_key='AllocationAccountNumber')
    number_of_allocation_periods = fields.Integer(required=True, data_key='NumberOfAllocationPeriods')


class ApprovalApi(Schema):
    document_approval_status = fields.Integer(required=True, description='1 = Approved, 2 = Rejected, 3 = ReadyForApproval', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='DocumentApprovalStatus')
    rejection_message = fields.String(description='Purpose: The message sent to users when rejecting a document. Empty if DocumentApprovalStatus is not 2 = Rejected.\r\nMax length: 200 characters', validate=[Length(min=0, max=200, equal=None)], data_key='RejectionMessage')
    rejection_message_receivers = fields.List(fields.UUID(), description='Purpose: The recipients of the rejection message. Empty if DocumentApprovalStatus is not 2 = Rejected. List of user ids.', data_key='RejectionMessageReceivers')


class VatReportApi(Schema):
    id = fields.UUID(data_key='Id')
    name = fields.String(data_key='Name')
    start_date = fields.DateTime(data_key='StartDate')
    end_date = fields.DateTime(data_key='EndDate')
    document_approval_status = fields.Integer(description='0 = None, 1 = Approved, 2 = Rejected, 3 = ReadyForApproval', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='DocumentApprovalStatus')
    document_id = fields.UUID(description='Purpose: Use for GET /v2/documents/{id}', data_key='DocumentId')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    is_regretted = fields.Boolean(description='Indicates whether the vat report was undone', data_key='IsRegretted')
    regretted_by_user_id = fields.UUID(description='If the vat report was undone this indicates the user id that did the action', data_key='RegrettedByUserId')
    regretted_date = fields.DateTime(description='If the vat report was undone this indicates the date of the action', data_key='RegrettedDate')
    modified_utc = fields.DateTime(data_key='ModifiedUtc')
    sent_for_approval_by_user_id = fields.UUID(data_key='SentForApprovalByUserId')
    voucher_id = fields.UUID(description='Purpose: Use for GET /v2/vouchers/{fiscalyearId}/{voucherId}', data_key='VoucherId')
    total_amount = fields.Number(description='Predicted vat amount to pay or be refunded', data_key='TotalAmount')
    approval_events_history = fields.List(fields.Nested('DocumentApprovalEventApi'), description='The history of approval events of the vat report.', data_key='ApprovalEventsHistory')


class DocumentApprovalEventApi(Schema):
    document_approval_status = fields.Integer(description='0 = None, 1 = Approved, 2 = Rejected, 3 = ReadyForApproval', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='DocumentApprovalStatus')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    created_by_user_id = fields.UUID(data_key='CreatedByUserId')


class ODataQueryOptionsArticleAccountCodingAPI(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseArticleAccountCodingAPI(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('ArticleAccountCodingAPI'), data_key='Data')


class ArticleAccountCodingAPI(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    name = fields.String(data_key='Name')
    name_english = fields.String(data_key='NameEnglish')
    type = fields.String(data_key='Type')
    vat_rate = fields.String(data_key='VatRate')
    is_active = fields.Boolean(data_key='IsActive')
    vat_rate_percent = fields.Number(data_key='VatRatePercent')
    domestic_sales_subject_to_reversed_construction_vat_account_number = fields.Integer(data_key='DomesticSalesSubjectToReversedConstructionVatAccountNumber')
    domestic_sales_subject_to_vat_account_number = fields.Integer(data_key='DomesticSalesSubjectToVatAccountNumber')
    domestic_sales_vat_exempt_account_number = fields.Integer(data_key='DomesticSalesVatExemptAccountNumber')
    foreign_sales_subject_to_moss_account_number = fields.Integer(data_key='ForeignSalesSubjectToMossAccountNumber')
    foreign_sales_subject_to_third_party_sales_account_number = fields.Integer(data_key='ForeignSalesSubjectToThirdPartySalesAccountNumber')
    foreign_sales_subject_to_vat_within_eu_account_number = fields.Integer(data_key='ForeignSalesSubjectToVatWithinEuAccountNumber')
    foreign_sales_vat_exempt_outside_eu_account_number = fields.Integer(data_key='ForeignSalesVatExemptOutsideEuAccountNumber')
    foreign_sales_vat_exempt_within_eu_account_number = fields.Integer(data_key='ForeignSalesVatExemptWithinEuAccountNumber')
    domestic_sales_vat_code_exempt_account_number = fields.Integer(data_key='DomesticSalesVatCodeExemptAccountNumber')
    changed_utc = fields.DateTime(description='Read-only', data_key='ChangedUtc')


class ODataQueryOptionsArticleLabelApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseArticleLabelApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('ArticleLabelApi'), data_key='Data')


class ArticleLabelApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    description = fields.String(description='Max length: 400 characters', validate=[Length(min=0, max=400, equal=None)], data_key='Description')


class ODataQueryOptionsArticleApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseArticleApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('ArticleApi'), data_key='Data')


class ArticleApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    is_active = fields.Boolean(required=True, data_key='IsActive')
    number = fields.String(required=True, description='Max length: 40 characters', validate=[Length(min=0, max=40, equal=None)], data_key='Number')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    name_english = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='NameEnglish')
    net_price = fields.Number(description='Format: Max 2 decimals', validate=[Range(min=0, max=10000000, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='NetPrice')
    gross_price = fields.Number(description='Format: Max 2 decimals', validate=[Range(min=0, max=10000000, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='GrossPrice')
    coding_id = fields.UUID(required=True, description='Source: Get from /v1/articleaccountcodings', data_key='CodingId')
    coding_name = fields.String(description='Read-only', data_key='CodingName')
    unit_id = fields.UUID(required=True, description='Source: Get from /v1/units', data_key='UnitId')
    unit_name = fields.String(description='Read-only: Returns the unit name entered from UnitId', data_key='UnitName')
    unit_abbreviation = fields.String(description='Read-only: Returns the unit abbreviation entered from UnitId', data_key='UnitAbbreviation')
    stock_balance = fields.Number(description='Default: 0. Purpose: Sets the stock balance for this article', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='StockBalance')
    stock_balance_manually_changed_utc = fields.DateTime(description='Read-only: Set when the stock balance is changed manually', data_key='StockBalanceManuallyChangedUtc')
    stock_balance_reserved = fields.Number(description='Purpose: Returns the reserved stock balance for this article', data_key='StockBalanceReserved')
    stock_balance_available = fields.Number(description='Purpose: Returns the available stock balance for this article', data_key='StockBalanceAvailable')
    changed_utc = fields.DateTime(description='Purpose: Returns the last date and time from when a change was made on the article', data_key='ChangedUtc')
    house_work_type = fields.Integer(data_key='HouseWorkType')
    purchase_price = fields.Number(data_key='PurchasePrice')
    purchase_price_manually_changed_utc = fields.DateTime(description='Read-only: Set when the purchase price is changed manually', data_key='PurchasePriceManuallyChangedUtc')
    send_to_webshop = fields.Boolean(description='Purpose: If true, will send article to VismaWebShop (If company has the integration). Default: True', data_key='SendToWebshop')
    article_labels = fields.List(fields.Nested('ArticleLabelApi'), data_key='ArticleLabels')


class AttachmentLinkApi(Schema):
    document_id = fields.UUID(description='The Id of the corresponding linked document', data_key='DocumentId')
    document_type = fields.Integer(required=True, description='0 = None, 1 = SupplierInvoice, 2 = Receipt, 3 = Voucher, 4 = SupplierInvoiceDraft, 5 = AllocationPeriod, 6 = Transfer', validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6], labels=[])], data_key='DocumentType')
    attachment_ids = fields.List(fields.UUID(), required=True, data_key='AttachmentIds')


class ODataQueryOptionsAttachmentResultApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseAttachmentResultApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('AttachmentResultApi'), data_key='Data')


class AttachmentResultApi(Schema):
    id = fields.UUID(data_key='Id')
    content_type = fields.String(data_key='ContentType')
    document_id = fields.UUID(data_key='DocumentId')
    attached_document_type = fields.Integer(description='0 = None, 1 = SupplierInvoice, 2 = Receipt, 3 = Voucher, 4 = SupplierInvoiceDraft, 5 = AllocationPeriod, 6 = Transfer', validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6], labels=[])], data_key='AttachedDocumentType')
    file_name = fields.String(data_key='FileName')
    temporary_url = fields.String(data_key='TemporaryUrl')
    comment = fields.String(data_key='Comment')
    supplier_name = fields.String(data_key='SupplierName')
    amount_invoice_currency = fields.Number(data_key='AmountInvoiceCurrency')
    type = fields.Integer(description='0 = Invoice, 1 = Receipt, 2 = Document', validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='Type')
    attachment_status = fields.Integer(description='0 = Matched, 1 = Unmatched', validate=[OneOf(choices=[0, 1], labels=[])], data_key='AttachmentStatus')
    uploaded_by = fields.String(description='Read-only', data_key='UploadedBy')
    image_date = fields.DateTime(description='Read-only', data_key='ImageDate')


class AttachmentUploadApi(Schema):
    id = fields.UUID(data_key='Id')
    content_type = fields.String(required=True, description="= ['image/jpeg' or 'image/png' or 'image/tiff' or 'application/pdf']", validate=[Length(min=0, max=15, equal=None)], data_key='ContentType')
    file_name = fields.String(required=True, data_key='FileName')
    data = fields.String(description='Format: Must be Base64 encoded byte array.', data_key='Data')
    url = fields.String(description='Must be public URL', data_key='Url')


class ODataQueryOptionsBankAccountApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseBankAccountApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('BankAccountApi'), data_key='Data')


class BankAccountApi(Schema):
    bank = fields.UUID(description='Not required for bank accounts of cash or tax account type', data_key='Bank')
    bank_account_type = fields.Integer(required=True, description='1 = ChequeAccount, 2 = CashAccount, 3 = SavingsAccount, 4 = CurrencyAccount, 5 = DigitalWalletAccount,\r\n6 = CashCreditAccount, 7 = TaxAccount', validate=[OneOf(choices=[1, 2, 3, 4, 5, 6, 7], labels=[])], data_key='BankAccountType')
    bank_account_type_description = fields.String(description='Read-only: Description of Bank Account type', data_key='BankAccountTypeDescription')
    bban = fields.String(description='Also known as Bank Account number. Not required for bank accounts of cash or tax account type', validate=[Length(min=0, max=35, equal=None)], data_key='Bban')
    iban = fields.String(validate=[Length(min=0, max=35, equal=None)], data_key='Iban')
    name = fields.String(required=True, validate=[Length(min=0, max=200, equal=None)], data_key='Name')
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    is_active = fields.Boolean(data_key='IsActive')
    ledger_account_number = fields.Integer(required=True, data_key='LedgerAccountNumber')
    has_active_bank_agreement = fields.Boolean(data_key='HasActiveBankAgreement')
    is_default_cheque_account = fields.Boolean(description='Purpose: Only used when having several cheque accounts', data_key='IsDefaultChequeAccount')


class ODataQueryOptionsBankApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseBankApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('BankApi'), data_key='Data')


class BankApi(Schema):
    id = fields.UUID(data_key='Id')
    name = fields.String(data_key='Name')


class ODataQueryOptionsCompanySettingsApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class CompanySettingsApi(Schema):
    name = fields.String(required=True, validate=[Length(min=0, max=100, equal=None)], data_key='Name')
    email = fields.String(validate=[Length(min=0, max=255, equal=None)], data_key='Email')
    phone = fields.String(validate=[Length(min=0, max=20, equal=None)], data_key='Phone')
    mobile_phone = fields.String(validate=[Length(min=0, max=20, equal=None)], data_key='MobilePhone')
    address1 = fields.String(validate=[Length(min=0, max=40, equal=None)], data_key='Address1')
    address2 = fields.String(validate=[Length(min=0, max=40, equal=None)], data_key='Address2')
    country_code = fields.String(required=True, validate=[Length(min=0, max=2, equal=None)], data_key='CountryCode')
    postal_code = fields.String(validate=[Length(min=0, max=10, equal=None)], data_key='PostalCode')
    city = fields.String(validate=[Length(min=0, max=40, equal=None)], data_key='City')
    website = fields.String(validate=[Length(min=0, max=255, equal=None)], data_key='Website')
    currency_code = fields.String(validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    terms_of_payment_id = fields.UUID(data_key='TermsOfPaymentId')
    corporate_identity_number = fields.String(description='Read-only', data_key='CorporateIdentityNumber')
    vat_code = fields.String(description='VAT identification number', data_key='VatCode')
    bank_giro = fields.String(description='Only used in Sweden.', data_key='BankGiro')
    plus_giro = fields.String(description='Only used in Sweden.', data_key='PlusGiro')
    bank_account = fields.String(data_key='BankAccount')
    iban = fields.String(data_key='Iban')
    accounting_locked_to = fields.DateTime(data_key='AccountingLockedTo')
    gln = fields.String(description='Global Location Number', data_key='Gln')
    product_variant = fields.Integer(description='Read-only: Variant of eAccouting. 1 = Standard/Smart, 2 = Invoicing, 3 = Bookkeeping, 4 = Start/Solo, 5 = Pro, 6 = InvoicingCollaboration', validate=[OneOf(choices=[1, 2, 3, 4, 5, 6], labels=[])], data_key='ProductVariant')
    type_of_business = fields.Integer(description='Read-only: 1 = Corporation, 2 = SoleProprietorship, 3 = EconomicAssociation, 4 = NonProfitOrganization, 5 = GeneralPartnership, 6 = LimitedPartnership, 7 = Cooperatives, 9 = PublicLimited', validate=[OneOf(choices=[1, 2, 3, 4, 5, 6, 7, 9], labels=[])], data_key='TypeOfBusiness')
    vat_period = fields.Integer(description='Read-only: Period when VAT report should be sent. 1 = OnceAMonth12th, 2 = OnceAMonth26th, 3 = OnceAQuarter, 4 = OnceAYear, 5 = Never, 6 = Bimonthly, 7 = OnceAMonth, 8 = TwiceAYear, 9 = OnceAQuarterFloating', validate=[OneOf(choices=[1, 2, 3, 4, 5, 6, 7, 8, 9], labels=[])], data_key='VatPeriod')
    activated_modules = fields.List(fields.String(), data_key='ActivatedModules')
    company_text = fields.Nested('CompanyTextsApi', data_key='CompanyText')
    next_customer_number = fields.Integer(description='Read-only', data_key='NextCustomerNumber')
    next_supplier_number = fields.Integer(description='Read-only', data_key='NextSupplierNumber')
    next_customer_invoice_number = fields.Integer(description='Read-only', data_key='NextCustomerInvoiceNumber')
    next_quote_number = fields.Integer(description='Read-only', data_key='NextQuoteNumber')
    show_prices_excl_vat_pc = fields.Boolean(description='Read-only: Show prices excluding VAT for private individuals', data_key='ShowPricesExclVatPC')


class CompanyTextsApi(Schema):
    customer_invoice_text_domestic = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='CustomerInvoiceTextDomestic')
    customer_invoice_text_foreign = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='CustomerInvoiceTextForeign')
    order_text_domestic = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='OrderTextDomestic')
    order_text_foreign = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='OrderTextForeign')
    over_due_text_domestic = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='OverDueTextDomestic')
    over_due_text_foreign = fields.String(description='Max length: 180 characters', validate=[Length(min=0, max=180, equal=None)], data_key='OverDueTextForeign')


class ODataQueryOptionsCostCenterApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class CostCenterItemApi(Schema):
    cost_center_id = fields.UUID(required=True, description='Source: Get from /v2/costcenters', data_key='CostCenterId')
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    short_name = fields.String(required=True, description='Max length: 9 characters', validate=[Length(min=0, max=9, equal=None)], data_key='ShortName')
    is_active = fields.Boolean(required=True, data_key='IsActive')


class PaginatedResponseCostCenterApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CostCenterApi'), data_key='Data')


class CostCenterApi(Schema):
    name = fields.String(validate=[Length(min=0, max=20, equal=None)], data_key='Name')
    number = fields.Integer(data_key='Number')
    is_active = fields.Boolean(data_key='IsActive')
    items = fields.List(fields.Nested('CostCenterItemApi'), data_key='Items')
    id = fields.UUID(data_key='Id')


class ODataQueryOptionsCountryApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCountryApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CountryApi'), data_key='Data')


class CountryApi(Schema):
    name = fields.String(data_key='Name')
    code = fields.String(data_key='Code')
    is_eu_member = fields.Boolean(data_key='IsEuMember')


class ODataQueryOptionsCurrencyApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCurrencyApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CurrencyApi'), data_key='Data')


class CurrencyApi(Schema):
    code = fields.String(data_key='Code')


class ODataQueryOptionsCustomerInvoiceDraftApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCustomerInvoiceDraftApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CustomerInvoiceDraftApi'), data_key='Data')


class CustomerInvoiceDraftApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    customer_id = fields.UUID(required=True, description='Source: Get from /v2/customers', data_key='CustomerId')
    created_utc = fields.DateTime(description='Read-only: Is automatically set', data_key='CreatedUtc')
    is_credit_invoice = fields.Boolean(data_key='IsCreditInvoice')
    rot_reduced_invoicing_type = fields.Integer(required=True, description='0 = Normal, 1 = Rot, 2 = Rut', validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='RotReducedInvoicingType')
    rot_reduced_invoicing_property_name = fields.String(description='Max length: 40 characters', validate=[Length(min=0, max=40, equal=None)], data_key='RotReducedInvoicingPropertyName')
    rot_reduced_invoicing_org_number = fields.String(description='Max length: 11 characters', validate=[Length(min=0, max=11, equal=None)], data_key='RotReducedInvoicingOrgNumber')
    rot_reduced_invoicing_amount = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='RotReducedInvoicingAmount')
    rot_reduced_invoicing_automatic_distribution = fields.Boolean(description='Default: False', data_key='RotReducedInvoicingAutomaticDistribution')
    rot_property_type = fields.Integer(data_key='RotPropertyType')
    house_work_other_costs = fields.Number(data_key='HouseWorkOtherCosts')
    rows = fields.List(fields.Nested('CustomerInvoiceDraftRowApi'), data_key='Rows')
    persons = fields.List(fields.Nested('SalesDocumentRotRutReductionPersonApi'), data_key='Persons')
    your_reference = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='YourReference')
    our_reference = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='OurReference')
    invoice_customer_name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceCustomerName')
    invoice_address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress1')
    invoice_address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress2')
    invoice_postal_code = fields.String(required=True, description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='InvoicePostalCode')
    invoice_city = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceCity')
    invoice_country_code = fields.String(required=True, description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='InvoiceCountryCode')
    invoice_currency_code = fields.String(description='Read-only', data_key='InvoiceCurrencyCode')
    delivery_customer_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryCustomerName')
    delivery_address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress1')
    delivery_address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress2')
    delivery_postal_code = fields.String(description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='DeliveryPostalCode')
    delivery_city = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryCity')
    delivery_country_code = fields.String(description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='DeliveryCountryCode')
    delivery_method_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryMethodName')
    delivery_term_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryTermName')
    delivery_method_code = fields.String(description='Max length: 20 characters', validate=[Length(min=0, max=20, equal=None)], data_key='DeliveryMethodCode')
    delivery_term_code = fields.String(description='Max length: 20 characters', validate=[Length(min=0, max=20, equal=None)], data_key='DeliveryTermCode')
    eu_third_party = fields.Boolean(required=True, data_key='EuThirdParty')
    customer_is_private_person = fields.Boolean(required=True, data_key='CustomerIsPrivatePerson')
    reverse_charge_on_construction_services = fields.Boolean(description='Read-only', data_key='ReverseChargeOnConstructionServices')
    sales_document_attachments = fields.List(fields.UUID(), description='Read-only', data_key='SalesDocumentAttachments')
    invoice_date = fields.DateTime(data_key='InvoiceDate')
    delivery_date = fields.DateTime(data_key='DeliveryDate')
    total_amount = fields.Number(description='Read-only', data_key='TotalAmount')
    total_vat_amount = fields.Number(description='Read-only', data_key='TotalVatAmount')
    total_roundings = fields.Number(description='Read-only', data_key='TotalRoundings')
    total_amount_base_currency = fields.Number(description='Read-only', data_key='TotalAmountBaseCurrency')
    total_vat_amount_base_currency = fields.Number(description='Read-only', data_key='TotalVatAmountBaseCurrency')
    customer_number = fields.String(description='Read-only\r\nMax length: 16 characters', validate=[Length(min=0, max=16, equal=None)], data_key='CustomerNumber')
    includes_vat = fields.Boolean(description='Read-only: If true the unit prices on rows include VAT. The value is set upon creation depending whether "Show prices excl. VAT for private individuals" in company settings is marked or not', data_key='IncludesVat')


class CustomerInvoiceDraftRowApi(Schema):
    line_number = fields.Integer(required=True, validate=[Range(min=0, max=1000, exclusive_min=False, exclusive_max=False)], data_key='LineNumber')
    article_id = fields.UUID(description='Source: Get from /v2/articles. Required if IsTextRow is false', data_key='ArticleId')
    article_number = fields.String(description='Purpose: Returns the article number from the entered ArticleId', data_key='ArticleNumber')
    is_text_row = fields.Boolean(required=True, data_key='IsTextRow')
    text = fields.String(required=True, description='Max length: 2000. Sets the article name', validate=[Length(min=0, max=2000, equal=None)], data_key='Text')
    unit_price = fields.Number(description="Format: 2 decimals allowed\r\nDefault: The price that is set on the article's register. For using a custom price, use this property", validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='UnitPrice')
    discount_percentage = fields.Number(description='Format: 4 decimals allowed', validate=[Range(min=0, max=1, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,4})?'))], data_key='DiscountPercentage')
    quantity = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Quantity')
    work_cost_type = fields.Integer(data_key='WorkCostType')
    is_work_cost = fields.Boolean(data_key='IsWorkCost')
    work_hours = fields.Number(data_key='WorkHours')
    material_costs = fields.Number(data_key='MaterialCosts')
    reversed_construction_services_vat_free = fields.Boolean(required=True, data_key='ReversedConstructionServicesVatFree')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /v2/costcenteritems', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /v2/costcenteritems', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /v2/costcenteritems', data_key='CostCenterItemId3')
    unit_abbreviation = fields.String(data_key='UnitAbbreviation')
    vat_rate_id = fields.String(description='Source: Get from /v2/articleaccountcodings \r\nRead-only', data_key='VatRateId')
    unit_name = fields.String(data_key='UnitName')
    project_id = fields.UUID(data_key='ProjectId')


class SalesDocumentRotRutReductionPersonApi(Schema):
    ssn = fields.String(required=True, description='Max length: 50 characters. Purpose: Social security number', validate=[Length(min=0, max=50, equal=None)], data_key='Ssn')
    amount = fields.Number(data_key='Amount')


class CustomerInvoiceDraftValidationApi(Schema):
    total_amount_invoice_currency = fields.Number(description='Invoice total amount. Should be negative when credit invoice', data_key='TotalAmountInvoiceCurrency')
    total_vat_amount_invoice_currency = fields.Number(description='Invoice VAT amount. Should be negative when credit invoice', data_key='TotalVatAmountInvoiceCurrency')
    total_roundings_invoice_currency = fields.Number(description='Invoice Roundings amount. Can be both positive and negative depending on the rounding.', data_key='TotalRoundingsInvoiceCurrency')
    rows = fields.List(fields.Nested('CustomerInvoiceDraftValidationRowApi'), description='A set of invoice rows to validate. We match upon the line number.', data_key='Rows')


class CustomerInvoiceDraftValidationRowApi(Schema):
    line_number = fields.Integer(description='Line number from the customer invoice draft', data_key='LineNumber')
    total_amount_no_vat_invoice_currency = fields.Number(description='Total amount without VAT ((Quantity * Unit price) - Discount)', data_key='TotalAmountNoVatInvoiceCurrency')
    total_amount_inc_vat_invoice_currency = fields.Number(description='Total amount with VAT ((Quantity * Unit price) - Discount)', data_key='TotalAmountIncVatInvoiceCurrency')


class CustomerInvoiceApi(Schema):
    id = fields.UUID(description='Read-only: This is automatically generated by eAccounting upon creation', data_key='Id')
    eu_third_party = fields.Boolean(required=True, data_key='EuThirdParty')
    is_credit_invoice = fields.Boolean(data_key='IsCreditInvoice')
    currency_code = fields.String(description='Read-only', data_key='CurrencyCode')
    currency_rate = fields.Number(description='Default: Automatic calculation of the currency rate. Enter this value to provide a custom rate', data_key='CurrencyRate')
    created_by_user_id = fields.UUID(description='Read-only', data_key='CreatedByUserId')
    total_amount = fields.Number(description='Read-only', data_key='TotalAmount')
    total_vat_amount = fields.Number(description='Read-only', data_key='TotalVatAmount')
    total_roundings = fields.Number(description='Read-only', data_key='TotalRoundings')
    total_amount_invoice_currency = fields.Number(description='Read-only', data_key='TotalAmountInvoiceCurrency')
    total_vat_amount_invoice_currency = fields.Number(description='Read-only', data_key='TotalVatAmountInvoiceCurrency')
    customer_id = fields.UUID(required=True, data_key='CustomerId')
    rows = fields.List(fields.Nested('CustomerInvoiceRowApi'), required=True, data_key='Rows')
    invoice_date = fields.DateTime(data_key='InvoiceDate')
    due_date = fields.DateTime(data_key='DueDate')
    delivery_date = fields.DateTime(data_key='DeliveryDate')
    rot_reduced_invoicing_type = fields.Integer(required=True, description='0 = Normal, 1 = Rot, 2 = Rut', validate=[Range(min=0, max=2, exclusive_min=False, exclusive_max=False), OneOf(choices=[0, 1, 2], labels=[])], data_key='RotReducedInvoicingType')
    rot_reduced_invoicing_amount = fields.Number(description='Default: Automatic tax reduction calculation. Used for the manual input of the deducted tax reduction', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='RotReducedInvoicingAmount')
    rot_reduced_invoicing_percent = fields.Number(description='Read-only', data_key='RotReducedInvoicingPercent')
    rot_reduced_invoicing_property_name = fields.String(description='Default: The name of the property type. Used for providing a custom name', data_key='RotReducedInvoicingPropertyName')
    rot_reduced_invoicing_org_number = fields.String(validate=[Length(min=0, max=11, equal=None)], data_key='RotReducedInvoicingOrgNumber')
    persons = fields.List(fields.Nested('SalesDocumentRotRutReductionPersonApi'), description='Required for ROT/RUT invoices only', data_key='Persons')
    rot_reduced_invoicing_automatic_distribution = fields.Boolean(description='Read-only', data_key='RotReducedInvoicingAutomaticDistribution')
    electronic_reference = fields.String(data_key='ElectronicReference')
    electronic_address = fields.String(description='Read-only', data_key='ElectronicAddress')
    edi_service_deliverer_id = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='EdiServiceDelivererId')
    our_reference = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='OurReference')
    your_reference = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='YourReference')
    invoice_customer_name = fields.String(description='Read-only', data_key='InvoiceCustomerName')
    invoice_address1 = fields.String(description='Read-only', data_key='InvoiceAddress1')
    invoice_address2 = fields.String(description='Read-only', data_key='InvoiceAddress2')
    invoice_postal_code = fields.String(description='Read-only', data_key='InvoicePostalCode')
    invoice_city = fields.String(description='Read-only', data_key='InvoiceCity')
    invoice_country_code = fields.String(description='Read-only', data_key='InvoiceCountryCode')
    delivery_customer_name = fields.String(description='Read-only', data_key='DeliveryCustomerName')
    delivery_address1 = fields.String(description='Read-only', data_key='DeliveryAddress1')
    delivery_address2 = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress2')
    delivery_postal_code = fields.String(description='Read-only', data_key='DeliveryPostalCode')
    delivery_city = fields.String(description='Read-only', data_key='DeliveryCity')
    delivery_country_code = fields.String(description='Read-only', data_key='DeliveryCountryCode')
    delivery_method_name = fields.String(description='Read-only', data_key='DeliveryMethodName')
    delivery_term_name = fields.String(description='Read-only', data_key='DeliveryTermName')
    delivery_method_code = fields.String(description='Read-only', data_key='DeliveryMethodCode')
    delivery_term_code = fields.String(description='Read-only', data_key='DeliveryTermCode')
    customer_is_private_person = fields.Boolean(description='Read-only', data_key='CustomerIsPrivatePerson')
    terms_of_payment_id = fields.UUID(description='Read-only', data_key='TermsOfPaymentId')
    customer_email = fields.String(description='Read-only', data_key='CustomerEmail')
    invoice_number = fields.Integer(description='Read-only', data_key='InvoiceNumber')
    customer_number = fields.String(description='Read-only', data_key='CustomerNumber')
    payment_reference_number = fields.String(description='Read-only', data_key='PaymentReferenceNumber')
    rot_property_type = fields.Integer(description='1 = Apartment, 2 = Property', validate=[Range(min=1, max=2, exclusive_min=False, exclusive_max=False)], data_key='RotPropertyType')
    sales_document_attachments = fields.List(fields.UUID(), description='Read-only', data_key='SalesDocumentAttachments')
    has_auto_invoice_error = fields.Boolean(description='Read-only', data_key='HasAutoInvoiceError')
    is_not_delivered = fields.Boolean(description='Read-only', data_key='IsNotDelivered')
    reverse_charge_on_construction_services = fields.Boolean(description='Read-only', data_key='ReverseChargeOnConstructionServices')
    work_house_other_costs = fields.Number(data_key='WorkHouseOtherCosts')
    remaining_amount = fields.Number(description='Read-only', data_key='RemainingAmount')
    remaining_amount_invoice_currency = fields.Number(description='Read-only', data_key='RemainingAmountInvoiceCurrency')
    referring_invoice_id = fields.UUID(description='Read-only', data_key='ReferringInvoiceId')
    voucher_number = fields.String(description='Read-only', data_key='VoucherNumber')
    voucher_id = fields.UUID(description='Read-only', data_key='VoucherId')
    created_utc = fields.DateTime(description='Read-only', data_key='CreatedUtc')
    modified_utc = fields.DateTime(description='Read-only', data_key='ModifiedUtc')
    reversed_construction_vat_invoicing = fields.Boolean(description='Read-only', data_key='ReversedConstructionVatInvoicing')
    includes_vat = fields.Boolean(description='Read-only: If true the unit prices on rows include VAT. The value is set upon creation depending whether "Show prices excl. VAT for private individuals" in company settings is marked or not', data_key='IncludesVat')
    send_type = fields.Integer(description='Work in progress.', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='SendType')


class CustomerInvoiceRowApi(Schema):
    id = fields.UUID(description='Read-only', data_key='Id')
    article_number = fields.String(description='Read-only', data_key='ArticleNumber')
    article_id = fields.UUID(description='Null if text row', data_key='ArticleId')
    amount_no_vat = fields.Number(description='Read-only', data_key='AmountNoVat')
    percent_vat = fields.Number(description='Read-only', data_key='PercentVat')
    line_number = fields.Integer(description='Read-only', data_key='LineNumber')
    is_text_row = fields.Boolean(description='Read-only', data_key='IsTextRow')
    text = fields.String(description="Default: The article's name", data_key='Text')
    unit_price = fields.Number(validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='UnitPrice')
    unit_abbreviation = fields.String(description='Read-only', data_key='UnitAbbreviation')
    unit_abbreviation_english = fields.String(description='Read-only', data_key='UnitAbbreviationEnglish')
    discount_percentage = fields.Number(description='Format: 4 decimals', validate=[Range(min=0, max=1, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,4})?'))], data_key='DiscountPercentage')
    quantity = fields.Number(validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Quantity')
    is_work_cost = fields.Boolean(description='Read-only', data_key='IsWorkCost')
    is_vat_free = fields.Boolean(data_key='IsVatFree')
    cost_center_item_id1 = fields.UUID(data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(data_key='CostCenterItemId3')
    unit_id = fields.UUID(description='Read-only', data_key='UnitId')
    project_id = fields.UUID(data_key='ProjectId')
    work_cost_type = fields.Integer(description='Only used for ROT/RUT invoices', data_key='WorkCostType')
    work_hours = fields.Number(description='Only used for ROT/RUT invoices', data_key='WorkHours')
    material_costs = fields.Number(description='Only used for ROT/RUT invoices', data_key='MaterialCosts')


class ODataQueryOptionsCustomerInvoiceApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCustomerInvoiceApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CustomerInvoiceApi'), data_key='Data')


class InvoiceUrlApi(Schema):
    url = fields.String(description='URL to the invoice.', data_key='Url')


class InvoicePaymentApi(Schema):
    company_bank_account_id = fields.UUID(required=True, description='The bank account to which the payment is recorded', data_key='CompanyBankAccountId')
    payment_date = fields.DateTime(required=True, data_key='PaymentDate')
    reference = fields.String(validate=[Length(min=0, max=100, equal=None)], data_key='Reference')
    payment_amount = fields.Number(required=True, description='Amount in invoice currency. If bank fee: for customer invoices, extract that amount here. For supplier invoices, do not extract bank fee amount here.', data_key='PaymentAmount')
    payment_currency = fields.String(required=True, data_key='PaymentCurrency')
    domestic_payment_amount = fields.Number(description='Only for non domestic invoices paid with cheque account. If bank fee: for customer invoices, extract that amount here. For supplier invoices, do not extract bank fee amount here.', data_key='DomesticPaymentAmount')
    bank_fee_amount = fields.Number(validate=[Range(min=0, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='BankFeeAmount')
    payment_type = fields.Integer(required=True, description='1 = PartialPayment, 2 = CompletePayment, 3 = Rounding', validate=[Range(min=1, max=3, exclusive_min=False, exclusive_max=False), OneOf(choices=[1, 2, 3], labels=[])], data_key='PaymentType')
    factoring_fee_amount = fields.Number(description='Factoring fee amount for the current invoice, supported only for customer invoice payments', data_key='FactoringFeeAmount')
    factoring_fee_account_number = fields.Integer(description='Factoring account number, supported only for customer invoice payments', data_key='FactoringFeeAccountNumber')


class ODataQueryOptionsCustomerLabelApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCustomerLabelApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CustomerLabelApi'), data_key='Data')


class CustomerLabelApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    description = fields.String(description='Max length: 400 characters', validate=[Length(min=0, max=400, equal=None)], data_key='Description')


class ODataQueryOptionsCustomerLedgerItemApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCustomerLedgerItemApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CustomerLedgerItemApi'), data_key='Data')


class CustomerLedgerItemApi(Schema):
    currency_code = fields.String(required=True, description='Max length: 3 characters', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    currency_rate = fields.Number(data_key='CurrencyRate')
    currency_rate_unit = fields.Integer(data_key='CurrencyRateUnit')
    customer_id = fields.UUID(required=True, description='Source: Get from /v1/customerlistitems.', data_key='CustomerId')
    due_date = fields.DateTime(required=True, description='Format: YYYY-MM-DD', data_key='DueDate')
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    invoice_date = fields.DateTime(required=True, description='Format: YYYY-MM-DD', data_key='InvoiceDate')
    invoice_number = fields.Integer(required=True, data_key='InvoiceNumber')
    is_credit_invoice = fields.Boolean(required=True, data_key='IsCreditInvoice')
    payment_reference_number = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='PaymentReferenceNumber')
    remaining_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='RemainingAmountInvoiceCurrency')
    roundings_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1, max=1, exclusive_min=False, exclusive_max=False)], data_key='RoundingsAmountInvoiceCurrency')
    total_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='TotalAmountInvoiceCurrency')
    vat_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='VATAmountInvoiceCurrency')
    voucher_id = fields.UUID(required=True, description='Source: Get from v1/vouchers/{fiscalyearid}.', data_key='VoucherId')
    modified_utc = fields.DateTime(data_key='ModifiedUtc')


class CustomerLedgerItemWithVoucherApi(Schema):
    currency_code = fields.String(required=True, description='Max length: 3 characters', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    currency_rate = fields.Number(data_key='CurrencyRate')
    currency_rate_unit = fields.Integer(data_key='CurrencyRateUnit')
    customer_id = fields.UUID(required=True, description='Source: Get from /customerlistitems.', data_key='CustomerId')
    due_date = fields.DateTime(required=True, description='Format: YYYY-MM-DD', data_key='DueDate')
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    invoice_date = fields.DateTime(required=True, description='Format: YYYY-MM-DD', data_key='InvoiceDate')
    invoice_number = fields.Integer(required=True, data_key='InvoiceNumber')
    is_credit_invoice = fields.Boolean(required=True, data_key='IsCreditInvoice')
    payment_reference_number = fields.String(validate=[Length(min=0, max=50, equal=None)], data_key='PaymentReferenceNumber')
    remaining_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='RemainingAmountInvoiceCurrency')
    roundings_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1, max=1, exclusive_min=False, exclusive_max=False)], data_key='RoundingsAmountInvoiceCurrency')
    total_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='TotalAmountInvoiceCurrency')
    vat_amount_invoice_currency = fields.Number(required=True, validate=[Range(min=-1000000000, max=1000000000, exclusive_min=False, exclusive_max=False)], data_key='VATAmountInvoiceCurrency')
    voucher = fields.Nested('VoucherApi', required=True, data_key='Voucher')
    modified_utc = fields.DateTime(data_key='ModifiedUtc')


class VoucherApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    voucher_date = fields.DateTime(required=True, description='Format: yyyy-mm-dd', data_key='VoucherDate')
    voucher_text = fields.String(required=True, description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='VoucherText')
    rows = fields.List(fields.Nested('VoucherRowApi'), required=True, data_key='Rows')
    number_and_number_series = fields.String(description='Purpose: Returns the voucher number.', data_key='NumberAndNumberSeries')
    number_series = fields.String(description='Purpose: Returns the number series. Use parameter useDefaultNumberSeries with false value to set Series.', data_key='NumberSeries')
    attachments = fields.Nested('AttachmentLinkApi', data_key='Attachments')
    modified_utc = fields.DateTime(data_key='ModifiedUtc')
    voucher_type = fields.Integer(description='2 = ManualVoucher, 5 = BankAccountTransferDeposit, 6 = BankAccountTransferWithDrawal, \r\n7 = PurchaseReceipt, 8 = VatReport, 9 = SieImport, 10 = BankTransactionDeposit, 11 = BankTransactionWithdrawal,\r\n12 = SupplierInvoiceDebit, 13 = SupplierInvoiceCredit, 14 = CustomerInvoiceDebit, 15 = CustomerInvoiceCredit,\r\n16 = ClaimOnCardAcquirer, 17 = TaxReturn, 18 = AllocationPeriod, 19 = AllocationPeriodCorrection, \r\n20 = InventoryEvent, 21 = EmployerReport, 22 = Payslip, 23 = CustomerQuickInvoiceDebit,\r\n24 = CustomerQuickInvoiceCredit, 25 = SupplierQuickInvoiceDebit, 26 = SupplierQuickInvoiceCredit, \r\n27 = IZettleVoucher', validate=[OneOf(choices=[2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], labels=[])], data_key='VoucherType')
    source_id = fields.UUID(data_key='SourceId')


class VoucherRowApi(Schema):
    account_number = fields.Integer(required=True, validate=[Range(min=1, max=None, exclusive_min=False, exclusive_max=False)], data_key='AccountNumber')
    account_description = fields.String(description='Read-only', data_key='AccountDescription')
    debit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Range(min=0, max=1000000000, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DebitAmount')
    credit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Range(min=0, max=1000000000, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='CreditAmount')
    transaction_text = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='TransactionText')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId3')
    vat_code_id = fields.UUID(data_key='VatCodeId')
    vat_code_and_percent = fields.String(data_key='VatCodeAndPercent')
    quantity = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Quantity')
    weight = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Weight')
    delivery_date = fields.DateTime(description='Format: YYYY-MM-DD\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', data_key='DeliveryDate')
    harvest_year = fields.Integer(description='Purpose: This feature is for dutch companies only which enabled agriculture support', data_key='HarvestYear')
    project_id = fields.UUID(description='Source: Get from /projects', data_key='ProjectId')


class ODataQueryOptionsCustomerApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseCustomerApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('CustomerApi'), data_key='Data')


class CustomerApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    customer_number = fields.String(description='Max length: 20 characters. Purpose: Unique identifier. If not provided, eAccounting will provide one', validate=[Length(min=0, max=16, equal=None)], data_key='CustomerNumber')
    corporate_identity_number = fields.String(description='Max length: 20 characters', validate=[Length(min=0, max=20, equal=None)], data_key='CorporateIdentityNumber')
    contact_person_email = fields.String(description='Max length: 255 characters', validate=[Length(min=0, max=255, equal=None)], data_key='ContactPersonEmail')
    contact_person_mobile = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='ContactPersonMobile')
    contact_person_name = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='ContactPersonName')
    contact_person_phone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='ContactPersonPhone')
    currency_code = fields.String(description='Max length: 3 characters. Default value: Currency of the user company', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    gln = fields.String(description='NOTE: Obsolete. Please use EdiGlnNumber instead', validate=[Length(min=0, max=255, equal=None)], data_key='GLN')
    email_address = fields.String(description='Max length: 255 characters', validate=[Length(min=0, max=255, equal=None)], data_key='EmailAddress')
    invoice_address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress1')
    invoice_address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress2')
    invoice_city = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceCity')
    invoice_country_code = fields.String(description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='InvoiceCountryCode')
    invoice_postal_code = fields.String(required=True, description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='InvoicePostalCode')
    delivery_customer_name = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='DeliveryCustomerName')
    delivery_address1 = fields.String(description='Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress1')
    delivery_address2 = fields.String(description='Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress2')
    delivery_city = fields.String(description='Max length: 50 characters. Purpose: Only used if invoice city differs from delivery city', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryCity')
    delivery_country_code = fields.String(description='Max length: 2 characters. Purpose: Only used if invoice country code differs from delivery country code', validate=[Length(min=0, max=2, equal=None)], data_key='DeliveryCountryCode')
    delivery_postal_code = fields.String(description='Max length: 10 characters. Purpose: Only used if invoice postal code differs from delivery postal code', validate=[Length(min=0, max=10, equal=None)], data_key='DeliveryPostalCode')
    delivery_method_id = fields.UUID(description='Source: Get from /v2/deliverymethods', data_key='DeliveryMethodId')
    delivery_term_id = fields.UUID(description='Source: Get from /v2/deliveryterms', data_key='DeliveryTermId')
    pay_to_account_id = fields.UUID(description='Read-only: The account Id on which payments are registered', data_key='PayToAccountId')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    note = fields.String(description='Max length: 4000 characters', validate=[Length(min=0, max=4000, equal=None)], data_key='Note')
    reverse_charge_on_construction_services = fields.Boolean(description='Default: false. Purpose: If true, VatNumber must be set aswell', data_key='ReverseChargeOnConstructionServices')
    webshop_customer_number = fields.Integer(data_key='WebshopCustomerNumber')
    mobile_phone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='MobilePhone')
    telephone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Telephone')
    terms_of_payment_id = fields.UUID(required=True, description='Source: Get from /v2/termsofpayment', data_key='TermsOfPaymentId')
    terms_of_payment = fields.Nested('TermsOfPaymentApi', data_key='TermsOfPayment')
    vat_number = fields.String(description='Max length: 20 characters. Format: 2 character country code followed by 8-12 numbers.', validate=[Length(min=0, max=20, equal=None)], data_key='VatNumber')
    www_address = fields.String(description='Max length: 255 characters', validate=[Length(min=0, max=255, equal=None)], data_key='WwwAddress')
    last_invoice_date = fields.DateTime(description='Read-only. Purpose: Returns the last invoice date', data_key='LastInvoiceDate')
    is_private_person = fields.Boolean(required=True, data_key='IsPrivatePerson')
    discount_percentage = fields.Number(description='Format: 4 decimals', validate=[Range(min=0, max=1, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,4})?'))], data_key='DiscountPercentage')
    changed_utc = fields.DateTime(description='Read-only. Purpose: Returns the last date and time from when a change was made on the customer', data_key='ChangedUtc')
    is_active = fields.Boolean(required=True, data_key='IsActive')
    force_bookkeep_vat = fields.Boolean(data_key='ForceBookkeepVat')
    edi_gln_number = fields.String(data_key='EdiGlnNumber')
    sales_document_language = fields.String(description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='SalesDocumentLanguage')
    electronic_address = fields.String(data_key='ElectronicAddress')
    electronic_reference = fields.String(data_key='ElectronicReference')
    edi_service_deliverer_id = fields.String(data_key='EdiServiceDelivererId')
    auto_invoice_activation_email_sent_date = fields.DateTime(data_key='AutoInvoiceActivationEmailSentDate')
    auto_invoice_registration_request_sent_date = fields.DateTime(data_key='AutoInvoiceRegistrationRequestSentDate')
    email_addresses = fields.List(fields.String(), data_key='EmailAddresses')
    customer_labels = fields.List(fields.Nested('CustomerLabelApi'), data_key='CustomerLabels')


class TermsOfPaymentApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    name = fields.String(data_key='Name')
    name_english = fields.String(data_key='NameEnglish')
    number_of_days = fields.Integer(data_key='NumberOfDays')
    terms_of_payment_type_id = fields.Integer(data_key='TermsOfPaymentTypeId')
    terms_of_payment_type_text = fields.String(data_key='TermsOfPaymentTypeText')
    available_for_sales = fields.Boolean(data_key='AvailableForSales')
    available_for_purchase = fields.Boolean(data_key='AvailableForPurchase')


class ODataQueryOptionsDeliveryMethodApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseDeliveryMethodApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('DeliveryMethodApi'), data_key='Data')


class DeliveryMethodApi(Schema):
    name = fields.String(data_key='Name')
    code = fields.String(data_key='Code')
    id = fields.UUID(data_key='Id')


class ODataQueryOptionsDeliveryTermApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseDeliveryTermApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('DeliveryTermApi'), data_key='Data')


class DeliveryTermApi(Schema):
    name = fields.String(data_key='Name')
    code = fields.String(data_key='Code')
    id = fields.UUID(data_key='Id')


class ODataQueryOptionsDocumentApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class DocumentApi(Schema):
    id = fields.UUID(data_key='Id')
    content_type = fields.String(data_key='ContentType')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    name = fields.String(data_key='Name')
    name_without_extension = fields.String(data_key='NameWithoutExtension')
    size = fields.Integer(description='Calculated in bytes', data_key='Size')
    type = fields.Integer(description='0 = SupplierInvoiceDraftAttachment, 1 = SupplierInvoiceAttachment, 2 = SupplierInvoiceXml,\r\n10 = CustomerInvoiceXml, 11 = CustomerInvoicePdf, 12 = CustomerInvoicePaymentReminderPdf,\r\n13 = CompanyLogo, 14 = DocumentBackgroundPdf, 20 = PhotoReceipt, 21 = PhotoSupplierInvoice,\r\n30 = AutoInvoiceAssembly, 40 = FinvoiceReceiverInfoXml, 41 = VatReportPdf', validate=[OneOf(choices=[0, 1, 2, 10, 11, 12, 13, 14, 20, 21, 30, 40, 41], labels=[])], data_key='Type')
    temporary_url = fields.String(description='This is a temporary url that will expire and should not be stored.', data_key='TemporaryUrl')


class ODataQueryOptionsFiscalYearApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseFiscalYearApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('FiscalYearApi'), data_key='Data')


class FiscalYearApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    start_date = fields.DateTime(data_key='StartDate')
    end_date = fields.DateTime(data_key='EndDate')
    is_locked_for_accounting = fields.Boolean(description='Read-only', data_key='IsLockedForAccounting')
    bookkeeping_method = fields.Integer(description='Read-only: When posting fiscalyear, previous years bookkeeping method is chosen. 0 = Invoicing, 1 = Cash, 2 = NoBookkeeping', validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='BookkeepingMethod')


class ODataQueryOptionsOpeningBalancesApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseOpeningBalancesApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('OpeningBalancesApi'), data_key='Data')


class OpeningBalancesApi(Schema):
    name = fields.String(data_key='Name')
    number = fields.Integer(data_key='Number')
    balance = fields.Number(data_key='Balance')


class ODataQueryOptionsForeignPaymentCodesAPI(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseForeignPaymentCodesAPI(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('ForeignPaymentCodesAPI'), data_key='Data')


class ForeignPaymentCodesAPI(Schema):
    code = fields.Integer(data_key='Code')
    description = fields.String(data_key='Description')
    id = fields.UUID(data_key='Id')
    country_code = fields.String(data_key='CountryCode')


class ODataQueryOptionsMessageThreadApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class MessageThreadApi(Schema):
    id = fields.UUID(description='Read-Only', data_key='Id')
    document_type = fields.Integer(validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], labels=[])], data_key='DocumentType')
    document_id = fields.UUID(data_key='DocumentId')
    document_number = fields.String(description='Read-Only', data_key='DocumentNumber')
    subject = fields.String(validate=[Length(min=0, max=40, equal=None)], data_key='Subject')
    modified_utc = fields.DateTime(description='Read-Only', data_key='ModifiedUtc')
    is_closed = fields.Boolean(description='Read-Only', data_key='IsClosed')
    message_receivers = fields.List(fields.Nested('MessageReceiverApi'), data_key='MessageReceivers')


class MessageReceiverApi(Schema):
    user_id = fields.UUID(required=True, data_key='UserId')
    status = fields.Integer(description='Read-Only', validate=[OneOf(choices=[0, 1, 2, 3, 4], labels=[])], data_key='Status')
    is_current_user = fields.Boolean(description='Read-Only', data_key='IsCurrentUser')


class MessageApi(Schema):
    id = fields.UUID(description='Read-Only', data_key='Id')
    text = fields.String(validate=[Length(min=0, max=256, equal=None)], data_key='Text')
    modified_utc = fields.DateTime(description='Read-Only', data_key='ModifiedUtc')
    created_utc = fields.DateTime(description='Read-Only', data_key='CreatedUtc')
    created_by_user_id = fields.UUID(description='Read-Only', data_key='CreatedByUserId')
    modified_by_user_id = fields.UUID(description='Read-Only', data_key='ModifiedByUserId')
    message_thread_id = fields.UUID(description='Read-Only', data_key='MessageThreadId')


class MessageStatusApi(Schema):
    status = fields.Integer(required=True, validate=[OneOf(choices=[0, 1, 2, 3, 4], labels=[])], data_key='Status')


class MessageToPostApi(Schema):
    message = fields.String(required=True, validate=[Length(min=0, max=256, equal=None)], data_key='Message')
    subject = fields.String(required=True, validate=[Length(min=0, max=40, equal=None)], data_key='Subject')
    document_type = fields.Integer(required=True, validate=[Range(min=0, max=16, exclusive_min=False, exclusive_max=False), OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], labels=[])], data_key='DocumentType')
    document_id = fields.UUID(data_key='DocumentId')
    message_receivers = fields.List(fields.Nested('MessageReceiverApi'), data_key='MessageReceivers')


class ODataQueryOptionsMessageApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class ODataQueryOptionsNoteApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class NoteApi(Schema):
    id = fields.UUID(description='Read-Only', data_key='Id')
    user_id = fields.UUID(description='Read-Only', data_key='UserId')
    attached_to = fields.UUID(description='The document Id to which the note can be attached', data_key='AttachedTo')
    text = fields.String(validate=[Length(min=0, max=256, equal=None)], data_key='Text')
    subject = fields.String(validate=[Length(min=0, max=40, equal=None)], data_key='Subject')
    document_type = fields.Integer(description='The document type to which the note is attached \r\nNone = 0, CustomerInvoice = 1, CustomerInvoiceDraft = 2, SupplierInvoice = 3, Voucher = 4, Quotation = 5, Order = 6, SupplierInvoiceDraft = 7, WebshopOrder = 8, Customer = 9, Receipt = 10, Article = 11, VatReport = 12, Supplier = 13, Inventory = 14, Employee = 15, Payslip = 16', validate=[Range(min=0, max=16, exclusive_min=False, exclusive_max=False), OneOf(choices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], labels=[])], data_key='DocumentType')
    created_utc = fields.DateTime(description='Read-Only', data_key='CreatedUtc')
    modified_utc = fields.DateTime(description='Read-Only', data_key='ModifiedUtc')
    is_done = fields.Boolean(description='Read-Only', data_key='IsDone')


class ODataQueryOptionsOrderApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseOrderApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('OrderApi'), data_key='Data')


class OrderApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    amount = fields.Number(required=True, description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Amount')
    customer_id = fields.UUID(required=True, data_key='CustomerId')
    currency_code = fields.String(required=True, description='Max length: 3 characters', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    created_utc = fields.DateTime(description='Read-Only', data_key='CreatedUtc')
    vat_amount = fields.Number(required=True, description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatAmount')
    roundings_amount = fields.Number(required=True, description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='RoundingsAmount')
    delivered_amount = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DeliveredAmount')
    delivered_vat_amount = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DeliveredVatAmount')
    delivered_roundings_amount = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DeliveredRoundingsAmount')
    delivery_customer_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryCustomerName')
    delivery_address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress1')
    delivery_address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryAddress2')
    delivery_postal_code = fields.String(description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='DeliveryPostalCode')
    delivery_city = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryCity')
    delivery_country_code = fields.String(description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='DeliveryCountryCode')
    your_reference = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='YourReference')
    our_reference = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='OurReference')
    invoice_address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress1')
    invoice_address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceAddress2')
    invoice_city = fields.String(required=True, data_key='InvoiceCity')
    invoice_country_code = fields.String(required=True, description='Max length: 2 characters', validate=[Length(min=0, max=2, equal=None)], data_key='InvoiceCountryCode')
    invoice_customer_name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceCustomerName')
    invoice_postal_code = fields.String(required=True, description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='InvoicePostalCode')
    delivery_method_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryMethodName')
    delivery_method_code = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=20, equal=None)], data_key='DeliveryMethodCode')
    delivery_term_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='DeliveryTermName')
    delivery_term_code = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=20, equal=None)], data_key='DeliveryTermCode')
    eu_third_party = fields.Boolean(required=True, data_key='EuThirdParty')
    customer_is_private_person = fields.Boolean(required=True, data_key='CustomerIsPrivatePerson')
    order_date = fields.DateTime(required=True, description='Format: YYYY-MM-DD', data_key='OrderDate')
    status = fields.Integer(required=True, description='1 = Draft, 2 = Ongoing, 3 = Shipped, 4 = Invoiced', validate=[Range(min=1, max=4, exclusive_min=False, exclusive_max=False), OneOf(choices=[1, 2, 3, 4], labels=[])], data_key='Status')
    number = fields.Integer(data_key='Number')
    modified_utc = fields.DateTime(description='Read-Only', data_key='ModifiedUtc')
    delivery_date = fields.DateTime(description='Format: YYYY-MM-DD. Default: null', data_key='DeliveryDate')
    house_work_amount = fields.Number(data_key='HouseWorkAmount')
    house_work_automatic_distribution = fields.Boolean(data_key='HouseWorkAutomaticDistribution')
    house_work_corporate_identity_number = fields.String(description='Max length: 20 characters', validate=[Length(min=0, max=20, equal=None)], data_key='HouseWorkCorporateIdentityNumber')
    house_work_property_name = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='HouseWorkPropertyName')
    rows = fields.List(fields.Nested('OrderRowApi'), data_key='Rows')
    shipped_date_time = fields.DateTime(description='Format: YYYY-MM-DD. Default: null', data_key='ShippedDateTime')
    rot_reduced_invoicing_type = fields.Integer(required=True, description='0 = None, 1 = Rot, 2 = Rut', validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='RotReducedInvoicingType')
    rot_property_type = fields.Integer(data_key='RotPropertyType')
    persons = fields.List(fields.Nested('SalesDocumentRotRutReductionPersonApi'), data_key='Persons')
    reverse_charge_on_construction_services = fields.Boolean(required=True, data_key='ReverseChargeOnConstructionServices')


class OrderRowApi(Schema):
    line_number = fields.Integer(required=True, validate=[Range(min=0, max=1000, exclusive_min=False, exclusive_max=False)], data_key='LineNumber')
    delivered_quantity = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DeliveredQuantity')
    article_id = fields.UUID(data_key='ArticleId')
    article_number = fields.String(description='Max length: 40 characters', validate=[Length(min=0, max=40, equal=None)], data_key='ArticleNumber')
    is_text_row = fields.Boolean(required=True, data_key='IsTextRow')
    text = fields.String(description='Max length: 2000 characters', validate=[Length(min=0, max=2000, equal=None)], data_key='Text')
    unit_price = fields.Number(description='Format: 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='UnitPrice')
    discount_percentage = fields.Number(description='Format: 4 decimals', validate=[Range(min=0, max=1, exclusive_min=False, exclusive_max=False), Regexp(regex=re.compile('[-]?\\d+(.\\d{1,4})?'))], data_key='DiscountPercentage')
    quantity = fields.Number(description='Format: 4 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,4})?'))], data_key='Quantity')
    work_cost_type = fields.Integer(data_key='WorkCostType')
    is_work_cost = fields.Boolean(required=True, data_key='IsWorkCost')
    eligible_for_reverse_charge_on_vat = fields.Boolean(required=True, data_key='EligibleForReverseChargeOnVat')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /v2/costcenters', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /v2/costcenters', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /v2/costcenters', data_key='CostCenterItemId3')
    id = fields.UUID(data_key='Id')
    project_id = fields.UUID(data_key='ProjectId')


class ODataQueryOptionsPartnerResourceLinkApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponsePartnerResourceLinkApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('PartnerResourceLinkApi'), data_key='Data')


class PartnerResourceLinkApi(Schema):
    id = fields.UUID(description='Read-only: Id provided by eAccounting', data_key='Id')
    resource_id = fields.UUID(required=True, description='Purpose: Link to the resource in eAccounting', data_key='ResourceId')
    resource_type = fields.Integer(required=True, description='0 = Article, 1 = Customer, 2 = Supplier, 3 = CustomerInvoice, 4 = SupplierInvoice,\r\n5 = CustomerInvoiceDraft, 6 = SupplierInvoiceDraft', validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6], labels=[])], data_key='ResourceType')
    href = fields.String(required=True, description='Link to the third party solution page', data_key='Href')
    partner_company_name = fields.String(required=True, data_key='PartnerCompanyName')
    partner_system_name = fields.String(required=True, data_key='PartnerSystemName')


class ODataQueryOptionsProjectApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseProjectApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('ProjectApi'), data_key='Data')


class ProjectApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    number = fields.String(required=True, description='Max length: 9 characters', validate=[Length(min=0, max=9, equal=None)], data_key='Number')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    start_date = fields.DateTime(required=True, data_key='StartDate')
    end_date = fields.DateTime(data_key='EndDate')
    customer_id = fields.UUID(data_key='CustomerId')
    customer_name = fields.String(description='Read-only: CustomerName depending on CustomerId', data_key='CustomerName')
    notes = fields.String(description='Max length: 500 characters', validate=[Length(min=0, max=500, equal=None)], data_key='Notes')
    status = fields.Integer(description='1 = Ongoing, 2 = Finished', validate=[OneOf(choices=[1, 2], labels=[])], data_key='Status')
    modified_utc = fields.DateTime(description='Read-only: Is automatically set', data_key='ModifiedUtc')


class SalesDocumentAttachmentUploadApi(Schema):
    content_type = fields.String(required=True, description="= ['application/pdf']", validate=[Length(min=0, max=15, equal=None)], data_key='ContentType')
    file_name = fields.String(required=True, data_key='FileName')
    dockument_id = fields.UUID(required=True, data_key='DockumentId')
    data = fields.String(description='Format: Must be Base64 encoded byte array.', data_key='Data')
    url = fields.String(description='Must be public URL', data_key='Url')


class SalesDocumentAttachmentApi(Schema):
    id = fields.UUID(data_key='Id')
    document_id = fields.UUID(data_key='DocumentId')
    document_type = fields.Integer(validate=[OneOf(choices=[0, 1, 2, 3, 4], labels=[])], data_key='DocumentType')
    original_filename = fields.String(data_key='OriginalFilename')
    document_size = fields.Integer(data_key='DocumentSize')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    thumbnail = fields.String(data_key='Thumbnail')


class ODataQueryOptionsSupplierInvoiceDraftApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseSupplierInvoiceDraftApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('SupplierInvoiceDraftApi'), data_key='Data')


class SupplierInvoiceDraftApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    supplier_id = fields.UUID(required=True, description='Source: Get from /supplierlistitems', data_key='SupplierId')
    bank_account_id = fields.UUID(description='Source: Get from /bankaccounts, if not provided the supplier bank account will be used.', data_key='BankAccountId')
    invoice_date = fields.DateTime(description="Format: YYYY-MM-DD. Default: Today's date", data_key='InvoiceDate')
    payment_date = fields.DateTime(description='Format: YYYY-MM-DD', data_key='PaymentDate')
    due_date = fields.DateTime(description='Format: YYYY-MM-DD. Default: Date based on the suppliers Terms of payment', data_key='DueDate')
    invoice_number = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceNumber')
    total_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='TotalAmount')
    vat = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Vat')
    vat_high = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatHigh')
    vat_medium = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatMedium')
    vat_low = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatLow')
    is_credit_invoice = fields.Boolean(required=True, data_key='IsCreditInvoice')
    currency_code = fields.String(description='Max length: 3 characters', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    currency_rate = fields.Number(description="Purpose: If currency code is domestic and currency rate isn't included it will be fetched from eAccounting", data_key='CurrencyRate')
    ocr_number = fields.String(description='Max length: 25 characters', validate=[Length(min=0, max=25, equal=None)], data_key='OcrNumber')
    message = fields.String(description='Max length: 25 characters', validate=[Length(min=0, max=25, equal=None)], data_key='Message')
    rows = fields.List(fields.Nested('SupplierInvoiceDraftRowApi'), required=True, data_key='Rows')
    supplier_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='SupplierName')
    supplier_number = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='SupplierNumber')
    self_employed_without_fixed_address = fields.Boolean(data_key='SelfEmployedWithoutFixedAddress')
    is_quick_invoice = fields.Boolean(data_key='IsQuickInvoice')
    is_domestic = fields.Boolean(data_key='IsDomestic')
    approval_status = fields.Integer(description='0 = None, 1 = Approved, 2 = Rejected, 3 = ReadyForApproval', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='ApprovalStatus')
    allocation_periods = fields.List(fields.Nested('AllocationPeriodApi'), description='Read-only: Post to /supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods/', data_key='AllocationPeriods')
    attachments = fields.Nested('AttachmentLinkApi', data_key='Attachments')


class SupplierInvoiceDraftRowApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    account_number = fields.Integer(validate=[Range(min=1, max=None, exclusive_min=False, exclusive_max=False)], data_key='AccountNumber')
    account_name = fields.String(data_key='AccountName')
    vat_code_id = fields.UUID(description='Purpose: Returns the Vat code id from the provided account number', data_key='VatCodeId')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /costcenters', data_key='CostCenterItemId3')
    project_id = fields.UUID(data_key='ProjectId')
    debit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DebitAmount')
    credit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='CreditAmount')
    transaction_text = fields.String(data_key='TransactionText')
    line_number = fields.Integer(description='Default: 1', data_key='LineNumber')
    quantity = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Quantity')
    weight = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Weight')
    delivery_date = fields.DateTime(description='Format: YYYY-MM-DD\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', data_key='DeliveryDate')
    harvest_year = fields.Integer(description='Purpose: This feature is for dutch companies only which enabled agriculture support', data_key='HarvestYear')


class SupplierInvoiceDraft(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    supplier_id = fields.UUID(required=True, description='Source: Get from /v1/supplierlistitems', data_key='SupplierId')
    bank_account_id = fields.UUID(description='Source: Get from /v1/bankaccounts', data_key='BankAccountId')
    invoice_date = fields.DateTime(description="Format: YYYY-MM-DD. Default: Today's date", data_key='InvoiceDate')
    payment_date = fields.DateTime(description='Format: YYYY-MM-DD', data_key='PaymentDate')
    due_date = fields.DateTime(description='Format: YYYY-MM-DD. Default: Date based on the suppliers Terms of payment', data_key='DueDate')
    invoice_number = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='InvoiceNumber')
    total_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='TotalAmount')
    vat = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Vat')
    vat_high = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatHigh')
    vat_medium = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatMedium')
    vat_low = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='VatLow')
    is_credit_invoice = fields.Boolean(required=True, data_key='IsCreditInvoice')
    currency_code = fields.String(description='Max length: 3 characters', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    currency_rate = fields.Number(description="Purpose: If currency code is domestic and currency rate isn't included it will be fetched from eAccounting", data_key='CurrencyRate')
    ocr_number = fields.String(description='Max length: 25 characters', validate=[Length(min=0, max=25, equal=None)], data_key='OcrNumber')
    message = fields.String(description='Max length: 25 characters', validate=[Length(min=0, max=25, equal=None)], data_key='Message')
    rows = fields.List(fields.Nested('SupplierInvoiceDraftRow'), required=True, data_key='Rows')
    supplier_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='SupplierName')
    supplier_number = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='SupplierNumber')
    self_employed_without_fixed_address = fields.Boolean(data_key='SelfEmployedWithoutFixedAddress')
    allocation_periods = fields.List(fields.Nested('AllocationPeriod'), description='Read-only: Post to /v1/supplierinvoicedrafts/{supplierInvoiceDraftId}/allocationperiods/', data_key='AllocationPeriods')
    attachments = fields.Nested('AttachmentLink', data_key='Attachments')


class SupplierInvoiceDraftRow(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    account_number = fields.Integer(validate=[Range(min=1, max=None, exclusive_min=False, exclusive_max=False)], data_key='AccountNumber')
    vat_code_id = fields.UUID(description='Purpose: Returns the Vat code id from the provided account number', data_key='VatCodeId')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /v1/costcenters', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /v1/costcenters', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /v1/costcenters', data_key='CostCenterItemId3')
    project_id = fields.UUID(data_key='ProjectId')
    quantity = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Quantity')
    weight = fields.Number(description='Format: Max 2 decimals\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='Weight')
    delivery_date = fields.DateTime(description='Format: YYYY-MM-DD\r\nPurpose: This feature is for dutch companies only which enabled agriculture support', data_key='DeliveryDate')
    harvest_year = fields.Integer(description='Purpose: This feature is for dutch companies only which enabled agriculture support', data_key='HarvestYear')
    debet_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DebetAmount')
    credit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='CreditAmount')
    line_number = fields.Integer(description='Default: 1', data_key='LineNumber')
    transaction_text = fields.String(description='Max length: 100 characters', validate=[Length(min=0, max=100, equal=None)], data_key='TransactionText')


class AllocationPeriod(Schema):
    id = fields.UUID(data_key='Id')
    supplier_invoice_id = fields.UUID(required=True, data_key='SupplierInvoiceId')
    supplier_invoice_row_line = fields.Integer(required=True, data_key='SupplierInvoiceRowLine')
    allocation_period_source_type = fields.Integer(dump_only=True, validate=[OneOf(choices=[0, 1], labels=[])], data_key='AllocationPeriodSourceType')
    status = fields.Integer(validate=[OneOf(choices=[0, 1, 2], labels=[])], data_key='Status')
    cost_center_item_id1 = fields.UUID(data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(data_key='CostCenterItemId3')
    project_id = fields.UUID(data_key='ProjectId')
    bookkeeping_date = fields.DateTime(data_key='BookkeepingDate')
    rows = fields.List(fields.Nested('AllocationPeriodRow'), required=True, data_key='Rows')
    debit_account_number = fields.Integer(dump_only=True, data_key='DebitAccountNumber')
    credit_account_number = fields.Integer(dump_only=True, data_key='CreditAccountNumber')
    amount = fields.Number(dump_only=True, data_key='Amount')


class AttachmentLink(Schema):
    document_id = fields.UUID(data_key='DocumentId')
    document_type = fields.Integer(required=True, validate=[OneOf(choices=[0, 1, 2, 3, 4, 5, 6], labels=[])], data_key='DocumentType')
    attachment_ids = fields.List(fields.UUID(), required=True, description='Source: Get from /v1/attachments.', data_key='AttachmentIds')


class AllocationPeriodRow(Schema):
    id = fields.UUID(data_key='Id')
    allocation_period_id = fields.UUID(data_key='AllocationPeriodId')
    account_number = fields.Integer(required=True, data_key='AccountNumber')
    amount = fields.Number(required=True, data_key='Amount')
    debit_credit = fields.Integer(required=True, validate=[OneOf(choices=[1, 2], labels=[])], data_key='DebitCredit')
    quantity = fields.Number(data_key='Quantity')
    weight = fields.Number(data_key='Weight')


class ODataQueryOptionsSupplierInvoiceApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseSupplierInvoiceApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('SupplierInvoiceApi'), data_key='Data')


class SupplierInvoiceApi(Schema):
    id = fields.UUID(description='Read-only: This is automatically generated by eAccounting upon creation', data_key='Id')
    supplier_id = fields.UUID(required=True, description='Source: Get from /v2/suppliers.', data_key='SupplierId')
    bank_account_id = fields.UUID(description='Read-Only', data_key='BankAccountId')
    invoice_date = fields.DateTime(description='Format: YYYY-MM-DD', data_key='InvoiceDate')
    payment_date = fields.DateTime(description='Read-Only', data_key='PaymentDate')
    due_date = fields.DateTime(description="Format: YYYY-MM-DD. Default: Date based on the supplier's terms of payment", data_key='DueDate')
    invoice_number = fields.String(data_key='InvoiceNumber')
    total_amount = fields.Number(data_key='TotalAmount')
    vat = fields.Number(data_key='Vat')
    vat_high = fields.Number(description='Only for Norway', data_key='VatHigh')
    vat_medium = fields.Number(description='Only for Norway', data_key='VatMedium')
    vat_low = fields.Number(description='Only for Norway', data_key='VatLow')
    is_credit_invoice = fields.Boolean(data_key='IsCreditInvoice')
    currency_code = fields.String(data_key='CurrencyCode')
    currency_rate = fields.Number(data_key='CurrencyRate')
    ocr_number = fields.String(data_key='OcrNumber')
    message = fields.String(data_key='Message')
    created_utc = fields.DateTime(description='Read-only', data_key='CreatedUtc')
    modified_utc = fields.DateTime(description='Read-only', data_key='ModifiedUtc')
    plus_giro_number = fields.String(description='Read-only', data_key='PlusGiroNumber')
    bank_giro_number = fields.String(description='Read-only', data_key='BankGiroNumber')
    rows = fields.List(fields.Nested('SupplierInvoiceRowApi'), data_key='Rows')
    supplier_name = fields.String(description='Read-only', data_key='SupplierName')
    supplier_number = fields.String(description='Read-only', data_key='SupplierNumber')
    is_quick_invoice = fields.Boolean(description='Read-only', data_key='IsQuickInvoice')
    is_domestic = fields.Boolean(description='Read-only', data_key='IsDomestic')
    remaining_amount = fields.Number(description='Read-only', data_key='RemainingAmount')
    remaining_amount_invoice_currency = fields.Number(description='Read-only', data_key='RemainingAmountInvoiceCurrency')
    voucher_number = fields.String(description='Read-only', data_key='VoucherNumber')
    voucher_id = fields.UUID(description='Read-only', data_key='VoucherId')
    created_from_draft_id = fields.UUID(description='Read-only', data_key='CreatedFromDraftId')
    self_employed_without_fixed_address = fields.Boolean(description='Read-only', data_key='SelfEmployedWithoutFixedAddress')
    allocation_periods = fields.List(fields.Nested('AllocationPeriodApi'), description='Read-only. For create use POST /v2/allocationperiods', data_key='AllocationPeriods')
    auto_credit_debit_pairing = fields.Boolean(data_key='AutoCreditDebitPairing')
    attachments = fields.List(fields.UUID(), data_key='Attachments')


class SupplierInvoiceRowApi(Schema):
    id = fields.UUID(description='Read-only: This is automatically generated by eAccounting upon creation', data_key='Id')
    account_number = fields.Integer(data_key='AccountNumber')
    account_name = fields.String(description='Read-only', data_key='AccountName')
    vat_code_id = fields.UUID(description='Only for Denmark and Netherlands', data_key='VatCodeId')
    vat_amount = fields.Number(description='Only for Denmark and Netherlands', data_key='VatAmount')
    cost_center_item_id1 = fields.UUID(description='Source: Get from /v2/costcenters.', data_key='CostCenterItemId1')
    cost_center_item_id2 = fields.UUID(description='Source: Get from /v2/costcenters.', data_key='CostCenterItemId2')
    cost_center_item_id3 = fields.UUID(description='Source: Get from /v2/costcenters.', data_key='CostCenterItemId3')
    quantity = fields.Number(data_key='Quantity')
    weight = fields.Number(data_key='Weight')
    delivery_date = fields.DateTime(data_key='DeliveryDate')
    harvest_year = fields.Integer(data_key='HarvestYear')
    debet_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='DebetAmount')
    credit_amount = fields.Number(description='Format: Max 2 decimals', validate=[Regexp(regex=re.compile('[-]?\\d+(.\\d{1,2})?'))], data_key='CreditAmount')
    line_number = fields.Integer(description='Read-only', data_key='LineNumber')
    project_id = fields.UUID(description='Source: Get from /v2/projects.', data_key='ProjectId')
    transaction_text = fields.String(data_key='TransactionText')


class ODataQueryOptionsSupplierApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseSupplierApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('SupplierApi'), data_key='Data')


class SupplierApi(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    supplier_number = fields.String(description='Max length: 16 characters. Purpose: Unique identifier. If not provided, eAccounting will provide one', validate=[Length(min=0, max=16, equal=None)], data_key='SupplierNumber')
    address1 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Address1')
    address2 = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Address2')
    automatic_payment_service = fields.Boolean(description='Purpose: SE only. Indicates if the supplier is paid by an automatic payment service. Supplier invoices to such suppliers will not be sent to the bank via the bank integration\r\nDefault value: false', data_key='AutomaticPaymentService')
    bank_account_number = fields.String(description='Max length: 50 characters. Purpose: Only used in norwegian and danish eAccounting for domestic payments', validate=[Length(min=0, max=50, equal=None)], data_key='BankAccountNumber')
    bank_bban = fields.String(description='Purpose: Used on foreign payments to identify a bankaccount together with Bank Code (SupplierBankCode)\r\nFormat NO: 11 characters, Format DK: 11-14 characters', validate=[Length(min=0, max=50, equal=None), Regexp(regex=re.compile('^[a-zA-Z0-9]{1,35}$'))], data_key='BankBban')
    bank_bic = fields.String(description='Purpose: Used on foreign payments to identify a bankaccount together with IBAN (SupplierBankIban)\r\nFormat: 6 letters followed by 2 or 5 characters (total length 8 or 11)', validate=[Length(min=0, max=50, equal=None), Regexp(regex=re.compile('^[a-zA-Z]{6}([a-zA-z0-9]{2}|[a-zA-z0-9]{5})$'))], data_key='BankBic')
    bank_code = fields.String(description='Purpose: Used on foreign payments to identify a bankaccount together with BBAN (SupplierBankBban)\r\nFormat: 2 letters followed by at least 3 characters', validate=[Length(min=0, max=50, equal=None), Regexp(regex=re.compile('^([a-zA-Z]{2})[a-zA-Z0-9]{3,}$'))], data_key='BankCode')
    bank_country_code = fields.String(description='Max length: 2 characters. Default value: Country of the supplier', validate=[Length(min=0, max=2, equal=None)], data_key='BankCountryCode')
    bankgiro_number = fields.String(description='Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers', validate=[Length(min=0, max=10, equal=None)], data_key='BankgiroNumber')
    bank_iban = fields.String(description='Purpose: Used on foreign payments to identify a bankaccount together with BIC (SupplierBankBic)\r\nFormat: 2 letters for country code, 2 control digits, 3 characters for bank identification', validate=[Length(min=0, max=50, equal=None), Regexp(regex=re.compile('^[a-zA-Z]{2}[0-9]{2}[a-zA-z0-9]{1,}$'))], data_key='BankIban')
    bank_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='BankName')
    city = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='City')
    contact_person_email = fields.String(description='Max length: 225 characters', validate=[Length(min=0, max=255, equal=None)], data_key='ContactPersonEmail')
    contact_person_mobile = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='ContactPersonMobile')
    contact_person_name = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='ContactPersonName')
    contact_person_phone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='ContactPersonPhone')
    corporate_identity_number = fields.String(description='Max length: 20 characters', validate=[Length(min=0, max=20, equal=None)], data_key='CorporateIdentityNumber')
    country_code = fields.String(validate=[Length(min=0, max=2, equal=None)], data_key='CountryCode')
    created_utc = fields.DateTime(data_key='CreatedUtc')
    currency_code = fields.String(description='Max length: 3 characters. Default value: Currency of the user company', validate=[Length(min=0, max=3, equal=None)], data_key='CurrencyCode')
    email_address = fields.String(description='Max length: 225 characters', validate=[Length(min=0, max=255, equal=None)], data_key='EmailAddress')
    mobile_phone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='MobilePhone')
    modified_utc = fields.DateTime(data_key='ModifiedUtc')
    name = fields.String(required=True, description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Name')
    note = fields.String(description='Max length: 400 characters', validate=[Length(min=0, max=4000, equal=None)], data_key='Note')
    plusgiro_number = fields.String(description='Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers', validate=[Length(min=0, max=10, equal=None)], data_key='PlusgiroNumber')
    postal_code = fields.String(description='Max length: 10 characters', validate=[Length(min=0, max=10, equal=None)], data_key='PostalCode')
    telephone = fields.String(description='Max length: 50 characters', validate=[Length(min=0, max=50, equal=None)], data_key='Telephone')
    terms_of_payment_id = fields.UUID(required=True, description='Source: Get from /v1/termsofpayment', data_key='TermsOfPaymentId')
    www_address = fields.String(description='Max length: 255 characters', validate=[Length(min=0, max=255, equal=None)], data_key='WwwAddress')
    bank_fee_code = fields.Integer(description='Purpose: Used for foreign payments to determine which party that pays for aditional bank fees', validate=[OneOf(choices=[0, 1, 2, 3], labels=[])], data_key='BankFeeCode')
    pay_from_bank_account_id = fields.UUID(description='Source: Get from /v1/bankaccounts. Purpose: Used for foreign payments to determine which bankaccount the payment will be from', data_key='PayFromBankAccountId')
    foreign_payment_code_id = fields.UUID(description='Source: Get from /v1/foreignpaymentcodes. Purpose: Used for categorization of foreign purchases (NO and SE only).', data_key='ForeignPaymentCodeId')
    uses_payment_reference_numbers = fields.Boolean(required=True, description='Purpose: Used if the supplier uses payment reference numbers. (OCR, KID etc.)', data_key='UsesPaymentReferenceNumbers')
    is_active = fields.Boolean(description='Default: true', data_key='IsActive')
    self_employed_without_fixed_address = fields.Boolean(data_key='SelfEmployedWithoutFixedAddress')


class ODataQueryOptionsTermsOfPaymentApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseTermsOfPaymentApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('TermsOfPaymentApi'), data_key='Data')


class ODataQueryOptionsUnitApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseUnitApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('UnitApi'), data_key='Data')


class UnitApi(Schema):
    id = fields.UUID(data_key='Id')
    name = fields.String(data_key='Name')
    code = fields.String(data_key='Code')
    abbreviation = fields.String(data_key='Abbreviation')


class ODataQueryOptionsUserApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseUserApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('UserApi'), data_key='Data')


class UserApi(Schema):
    id = fields.UUID(data_key='Id')
    email = fields.String(data_key='Email')
    first_name = fields.String(data_key='FirstName')
    last_name = fields.String(data_key='LastName')
    is_active = fields.Boolean(data_key='IsActive')
    is_current_user = fields.Boolean(data_key='IsCurrentUser')
    is_consultant = fields.Boolean(data_key='IsConsultant')


class ODataQueryOptionsVatCodeApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class VatCode(Schema):
    id = fields.UUID(description='Read-only: Unique Id provided by eAccounting', data_key='Id')
    code = fields.String(description='Returns the VAT code', data_key='Code')
    description = fields.String(data_key='Description')
    vat_rate = fields.Number(data_key='VatRate')
    related_accounts = fields.Nested('RelatedAccounts', data_key='RelatedAccounts')


class RelatedAccounts(Schema):
    account_number1 = fields.Integer(data_key='AccountNumber1')
    account_number2 = fields.Integer(data_key='AccountNumber2')
    account_number3 = fields.Integer(data_key='AccountNumber3')


class ODataQueryOptionsVatReportApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseVatReportApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('VatReportApi'), data_key='Data')


class ODataQueryOptionsVoucherApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseVoucherApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('VoucherApi'), data_key='Data')


class ODataQueryOptionsWebshopOrderApi(Schema):
    if_match = fields.Field(dump_only=True, data_key='IfMatch')
    if_none_match = fields.Field(dump_only=True, data_key='IfNoneMatch')
    context = fields.Nested('ODataQueryContext', data_key='Context')
    request = fields.Field(dump_only=True, data_key='Request')
    raw_values = fields.Nested('ODataRawQueryOptions', data_key='RawValues')
    select_expand = fields.Nested('SelectExpandQueryOption', data_key='SelectExpand')
    apply = fields.Nested('ApplyQueryOption', data_key='Apply')
    filter = fields.Nested('FilterQueryOption', data_key='Filter')
    order_by = fields.Nested('OrderByQueryOption', data_key='OrderBy')
    skip = fields.Nested('SkipQueryOption', data_key='Skip')
    top = fields.Nested('TopQueryOption', data_key='Top')
    count = fields.Nested('CountQueryOption', data_key='Count')
    validator = fields.Nested('ODataQueryValidator', data_key='Validator')


class PaginatedResponseWebshopOrderApi(Schema):
    meta = fields.Nested('PaginationMetadata', data_key='Meta')
    data = fields.List(fields.Nested('WebshopOrderApi'), data_key='Data')


class WebshopOrderApi(Schema):
    id = fields.UUID(data_key='Id')
    base_currency_code = fields.String(data_key='BaseCurrencyCode')
    name = fields.String(data_key='Name')
    number = fields.String(data_key='Number')
    order_currency_code = fields.String(data_key='OrderCurrencyCode')
    order_date = fields.DateTime(data_key='OrderDate')
    order_number = fields.String(data_key='OrderNumber')
    note = fields.String(data_key='Note')
    total_amount_base_currency = fields.Number(data_key='TotalAmountBaseCurrency')
    total_amount_order_currency = fields.Number(data_key='TotalAmountOrderCurrency')
    rows = fields.List(fields.Nested('WebshopOrderRowApi'), data_key='Rows')


class WebshopOrderRowApi(Schema):
    id = fields.UUID(data_key='Id')
    article_name = fields.String(data_key='ArticleName')
    article_number = fields.String(data_key='ArticleNumber')
    price_per_unit_invoice_currency = fields.Number(data_key='PricePerUnitInvoiceCurrency')
    quantity = fields.Number(data_key='Quantity')
    unit_abbreviation = fields.String(data_key='UnitAbbreviation')
    sum = fields.Number(data_key='Sum')
